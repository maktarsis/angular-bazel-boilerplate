load("@build_bazel_rules_nodejs//:defs.bzl", "history_server", "rollup_bundle")
load("@build_bazel_rules_nodejs//internal/web_package:web_package.bzl", "web_package")
load("@npm_angular_bazel//:index.bzl", "ng_module")
load("@npm_bazel_typescript//:defs.bzl", "ts_config", "ts_devserver")

package(default_visibility = ["//visibility:public"])

# We don't import from these, but the generated ngfactory code will
NG_FACTORY_ADDED_IMPORTS = [
    "@npm//@angular/animations",
    "@npm//@angular/cdk",
    "@npm//@angular/material",
    "@npm//@angular/forms",
]

genrule(
    name = "zonejs",
    srcs = ["@npm//node_modules/zone.js:dist/zone.min.js"],
    outs = ["zone.min.js"],
    cmd = "cp $< $@",
)

genrule(
    name = "systemjs",
    srcs = ["@npm//node_modules/systemjs:dist/system.js"],
    outs = ["system.js"],
    cmd = "cp $< $@",
)

genrule(
    name = "core-js",
    srcs = ["@npm//node_modules/core-js:client/core.min.js"],
    outs = ["core.min.js"],
    cmd = "cp $< $@",
)

ts_config(
    name = "tsconfig-test",
    src = "//src/configs:tsconfig.spec.json",
    deps = ["//src/configs:tsconfig.app.json"],
)

ng_module(
    name = "src",
    srcs = glob(
        ["*.ts"],
        exclude = ["main.ts"],
    ),
    assets = ["//src/assets/styles:main"],
    tsconfig = "//src/configs:tsconfig.app.json",
    deps = [
        "//src/app",
        "//src/app/shared/material",
        "@npm//@angular/platform-browser",
        "@npm//@ngrx/store",
    ],
)

filegroup(
    name = "rxjs_umd_modules",
    srcs = [
        "//src/configs:rxjs_shims.js",
        "@npm//node_modules/rxjs:bundles/rxjs.umd.js",
    ],
)

# We always strip these paths off the front of any assets we serve
_ROOT_DIRS = [
    "npm/node_modules/zone.js/dist",
    "npm/node_modules/@angular/material/prebuilt-themes",
    "npm/node_modules/@ngrx/store/bundles",
]

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = _ROOT_DIRS,
    # Serve these files but don't inject tags for them into the index file
    # This might be because we only want to lazy-load these scripts on-demand,
    # or because they aren't compatible with Require.js so we must use a runtime
    # loader to load them.
    data = [
        "//src/assets/images",
        "@npm//node_modules/@ngrx/store:bundles/store.umd.min.js",
    ],
    # Start from the development version of the main
    entry_module = "boilerplate/src/main.dev",
    # <script> and <link> tags will be automatically injected into this index file
    index_html = "index.html",
    # Localhost
    port = 4200,
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//node_modules/tslib:tslib.js",
        "//src/configs:require.config.js",
        ":rxjs_umd_modules",
        "@npm//node_modules/@angular/animations:bundles/animations.umd.js",
        "@npm//node_modules/@angular/animations:bundles/animations-browser.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-platform.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-collections.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-coercion.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-bidi.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-text-field.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-a11y.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-keycodes.umd.js",
        "@npm//node_modules/@angular/cdk:bundles/cdk-observers.umd.js",
        "@npm//node_modules/@angular/common:bundles/common.umd.js",
        "@npm//node_modules/@angular/common:bundles/common-http.umd.js",
        "@npm//node_modules/@angular/core:bundles/core.umd.js",
        "@npm//node_modules/@angular/forms:bundles/forms.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-button.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-card.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-core.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-divider.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-form-field.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-list.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-toolbar.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-icon.umd.js",
        "@npm//node_modules/@angular/material:bundles/material-input.umd.js",
        "@npm//node_modules/@angular/platform-browser:bundles/platform-browser.umd.js",
        "@npm//node_modules/@angular/platform-browser:bundles/platform-browser-animations.umd.js",
        "@npm//node_modules/@angular/router:bundles/router.umd.js",
        "@npm//node_modules/@angular/router:router.ngfactory.js",
        "@npm//node_modules/@angular/material:button/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:card/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:core/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:form-field/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:icon/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:list/typings/index.ngfactory.js",
        "@npm//node_modules/@angular/material:toolbar/typings/index.ngfactory.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    # The corresponding <script> or <link> tags will be injected into the index_html
    static_files = [
        "//src/assets/styles:main.css",
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        #  We load zone.js outside the bundle. That's because it's a "polyfill"
        # which speculates that such features might be available in a browser.
        # Also it's tricky to configure dead code elimination to understand that
        # zone.js is used, given that we don't have any import statement that imports from it.
        "zonejs",
    ],
    # Tell Bazel to build the sources first
    deps = ["//src"],
)

rollup_bundle(
    name = "bundle",
    # These Angular routes may be lazy-loaded at runtime.
    # So we tell Rollup that it can put them in separate JS chunks
    # (code-splitting) for faster application startup.
    # In the future, we could automatically gather these from statically
    # analyzing the Angular sources.
    additional_entry_points = [
        "src/features/hello-world/hello-world.module.ngfactory",
        "src/features/todos/todos.module.ngfactory",
    ],
    entry_point = "src/main.prod",
    deps = [
        "//src",
        "@npm//@angular/common",
        "@npm//@angular/core",
        "@npm//@angular/material",
        "@npm//@angular/platform-browser",
        "@npm//@angular/router",
        "@npm//@ngrx/store",
        "@npm//rxjs",
    ],
)

web_package(
    name = "prodapp",
    additional_root_paths = _ROOT_DIRS + [
        "npm/node_modules/systemjs/dist",
        "npm/node_modules/core-js/client",
    ],
    # do not sort
    assets = [
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        "zonejs",
        "//src/assets/styles:main",
        # For differential loading, we supply both an ESModule entry point and an es5 entry point
        # The injector will put two complimentary script tags in the index.html
        ":bundle.min.js",
        ":bundle.min.es2015.js",
        # Include polyfills that will be requested by old browsers
        "systemjs",
        "core-js",
    ],
    data = [
        ":bundle",
        "//src/assets/images",
    ],
    # <script> and <link> tags will be automatically injected into this index.
    index_html = "index.html",
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    templated_args = ["src/prodapp"],
)
